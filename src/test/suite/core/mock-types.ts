import * as vscode from 'vscode';

export type ApiProvider = 'anthropic' | 'openai' | 'vertex' | 'bedrock' | 'glama' | 'openrouter' | 'lmstudio' | 'ollama' | 'mistral' | 'deepseek' | 'gemini' | 'openai-native' | 'unbound' | 'vscode-lm';

export interface ClineProvider {
    // Basic properties
    context: vscode.ExtensionContext;
    outputChannel: {
        appendLine: (value: string) => void;
    };
    disposables: vscode.Disposable[];
    isViewLaunched: boolean;
    latestAnnouncementId: string;
    configManager: any;
    webviewPanel: vscode.WebviewPanel | undefined;
    currentTask: any;
    taskHistory: any[];
    taskQueue: any[];
    isProcessing: boolean;
    isSaving: boolean;
    isRestoring: boolean;
    lastSaveTime: number;
    lastRestoreTime: number;
    lastAnnouncementTime: number;
    lastUpdateCheck: number;
    lastTokenCount: number;
    totalTokenCount: number;
    cacheHits: number;
    cacheMisses: number;
    totalCost: number;
    messageQueue: any[];
    messageHistory: any[];
    currentMessage: any;
    currentResponse: any;
    currentError: any;
    currentProgress: number;
    currentStatus: string;
    currentMode: string;
    currentContext: any;
    currentFile: string;
    currentLine: number;
    currentColumn: number;
    currentSelection: vscode.Selection | undefined;
    currentWorkspaceFolder: vscode.WorkspaceFolder | undefined;
    currentTerminal: vscode.Terminal | undefined;
    currentDebugSession: vscode.DebugSession | undefined;
    currentTestRun: vscode.TestRun | undefined;
    currentDiagnostics: vscode.Diagnostic[];
    currentProblems: vscode.Diagnostic[];
    currentWarnings: vscode.Diagnostic[];
    currentErrors: vscode.Diagnostic[];
    currentInfos: vscode.Diagnostic[];
    currentHints: vscode.Diagnostic[];
    currentFixes: vscode.CodeAction[];
    currentCommands: vscode.Command[];
    currentCodeLens: vscode.CodeLens[];
    currentCompletions: vscode.CompletionItem[];
    currentSignatures: vscode.SignatureHelp | undefined;
    currentHover: vscode.Hover | undefined;
    currentDefinitions: vscode.Definition | undefined;
    currentReferences: vscode.Location[];
    currentSymbols: vscode.SymbolInformation[];
    currentWorkspaceSymbols: vscode.SymbolInformation[];
    currentDocumentSymbols: vscode.DocumentSymbol[];
    currentFormattingOptions: vscode.FormattingOptions | undefined;
    customModesManager: any;

    // Methods
    dispose: () => void;
    resolveWebviewView: (webviewView: vscode.WebviewView) => Promise<void>;
    initClineWithTask: (task: string, images?: string[]) => Promise<void>;
    initClineWithHistoryItem: (historyItem: any) => Promise<void>;
    initClineWithHistory: (historyItem: any) => Promise<void>;
    abortCurrentTask: () => Promise<void>;
    clearTask: () => Promise<void>;
    saveState: () => Promise<void>;
    restoreState: () => Promise<void>;
    checkForUpdates: () => Promise<void>;
    showAnnouncement: () => Promise<void>;
    showProgress: (progress: number) => void;
    showStatus: (status: string) => void;
    showError: (error: string) => void;
    showMessage: (message: string) => void;
    showWarning: (warning: string) => void;
    showInfo: (info: string) => void;
    showHint: (hint: string) => void;
    showDiagnostic: (diagnostic: vscode.Diagnostic) => void;
    showProblem: (problem: vscode.Diagnostic) => void;
    showFix: (fix: vscode.CodeAction) => void;
    showCommand: (command: vscode.Command) => void;
    showCodeLens: (codeLens: vscode.CodeLens) => void;
    showCompletion: (completion: vscode.CompletionItem) => void;
    showSignature: (signature: vscode.SignatureHelp) => void;
    showHover: (hover: vscode.Hover) => void;
    showDefinition: (definition: vscode.Definition) => void;
    showReference: (reference: vscode.Location) => void;
    showSymbol: (symbol: vscode.SymbolInformation) => void;
    showWorkspaceSymbol: (symbol: vscode.SymbolInformation) => void;
    showDocumentSymbol: (symbol: vscode.DocumentSymbol) => void;
    showFormattingOptions: (options: vscode.FormattingOptions) => void;
    postMessageToWebview: (message: any) => Promise<void>;
    getHMRHtmlContent: () => string;
    getHtmlContent: () => string;
    handleMessage: (message: any) => Promise<void>;
    handleError: (error: any) => void;
    handleProgress: (progress: number) => void;
    handleStatus: (status: string) => void;
    handleCommand: (command: vscode.Command) => Promise<void>;
    handleCodeAction: (action: vscode.CodeAction) => Promise<void>;
    handleCodeLens: (codeLens: vscode.CodeLens) => Promise<void>;
    handleCompletion: (completion: vscode.CompletionItem) => Promise<void>;
    handleSignature: (signature: vscode.SignatureHelp) => Promise<void>;
    handleHover: (hover: vscode.Hover) => Promise<void>;
    handleDefinition: (definition: vscode.Definition) => Promise<void>;
    handleReference: (reference: vscode.Location) => Promise<void>;
    handleSymbol: (symbol: vscode.SymbolInformation) => Promise<void>;
    handleWorkspaceSymbol: (symbol: vscode.SymbolInformation) => Promise<void>;
    handleDocumentSymbol: (symbol: vscode.DocumentSymbol) => Promise<void>;
    handleFormatting: (options: vscode.FormattingOptions) => Promise<void>;
    handleDiagnostic: (diagnostic: vscode.Diagnostic) => Promise<void>;
    handleProblem: (problem: vscode.Diagnostic) => Promise<void>;
    handleWarning: (warning: vscode.Diagnostic) => Promise<void>;
    handleInfo: (info: vscode.Diagnostic) => Promise<void>;
    handleHint: (hint: vscode.Diagnostic) => Promise<void>;
    handleFix: (fix: vscode.CodeAction) => Promise<void>;
    handleTest: (test: vscode.TestItem) => Promise<void>;
    handleDebug: (session: vscode.DebugSession) => Promise<void>;
    handleTerminal: (terminal: vscode.Terminal) => Promise<void>;
    handleWorkspace: (folder: vscode.WorkspaceFolder) => Promise<void>;
    handleFile: (uri: vscode.Uri) => Promise<void>;
    handleSelection: (selection: vscode.Selection) => Promise<void>;
    handleContext: (context: any) => Promise<void>;
    handleMode: (mode: string) => Promise<void>;
    handleTask: (task: any) => Promise<void>;
    handleMessage_: (message: any) => Promise<void>;
    handleResponse: (response: any) => Promise<void>;
    handleQueue: (queue: any[]) => Promise<void>;
    handleHistory: (history: any[]) => Promise<void>;
    handleState: (state: any) => Promise<void>;
    handleUpdate: (update: any) => Promise<void>;
    handleAnnouncement: (announcement: any) => Promise<void>;
    handleModeSwitch: (mode: string) => Promise<void>;
    updateApiConfiguration: (config: any) => Promise<void>;
    cancelTask: () => Promise<void>;
    handleApiConfigUpdate: (config: any) => Promise<void>;
    handleCustomInstructionsUpdate: (instructions: string) => Promise<void>;
    handleDiffSettingsUpdate: (settings: any) => Promise<void>;
    handleCheckpointsSettingsUpdate: (settings: any) => Promise<void>;
    handleFuzzyMatchSettingsUpdate: (settings: any) => Promise<void>;
    handleTaskUpdate: (task: any) => Promise<void>;
    handleTaskHistoryUpdate: (history: any[]) => Promise<void>;
    handleTaskQueueUpdate: (queue: any[]) => Promise<void>;
    handleProcessingUpdate: (processing: boolean) => Promise<void>;
    handleSavingUpdate: (saving: boolean) => Promise<void>;
    handleRestoringUpdate: (restoring: boolean) => Promise<void>;
    handleTokenCountUpdate: (count: number) => Promise<void>;
    handleCacheUpdate: (cache: any) => Promise<void>;
    handleCostUpdate: (cost: number) => Promise<void>;
    handleMessageQueueUpdate: (queue: any[]) => Promise<void>;
    handleMessageHistoryUpdate: (history: any[]) => Promise<void>;
    handleCurrentMessageUpdate: (message: any) => Promise<void>;
    handleCurrentResponseUpdate: (response: any) => Promise<void>;
    handleCurrentErrorUpdate: (error: any) => Promise<void>;
    handleCurrentProgressUpdate: (progress: number) => Promise<void>;
    handleCurrentStatusUpdate: (status: string) => Promise<void>;
    handleCurrentModeUpdate: (mode: string) => Promise<void>;
    handleCurrentContextUpdate: (context: any) => Promise<void>;
    handleCurrentFileUpdate: (file: string) => Promise<void>;
    handleCurrentLineUpdate: (line: number) => Promise<void>;
    handleCurrentColumnUpdate: (column: number) => Promise<void>;
    handleCurrentSelectionUpdate: (selection: vscode.Selection) => Promise<void>;
    handleCurrentWorkspaceFolderUpdate: (folder: vscode.WorkspaceFolder) => Promise<void>;
    handleCurrentTerminalUpdate: (terminal: vscode.Terminal) => Promise<void>;
    handleCurrentDebugSessionUpdate: (session: vscode.DebugSession) => Promise<void>;
    handleCurrentTestRunUpdate: (run: vscode.TestRun) => Promise<void>;
    handleCurrentDiagnosticsUpdate: (diagnostics: vscode.Diagnostic[]) => Promise<void>;
    handleCurrentProblemsUpdate: (problems: vscode.Diagnostic[]) => Promise<void>;
    handleCurrentWarningsUpdate: (warnings: vscode.Diagnostic[]) => Promise<void>;
    handleCurrentErrorsUpdate: (errors: vscode.Diagnostic[]) => Promise<void>;
    handleCurrentInfosUpdate: (infos: vscode.Diagnostic[]) => Promise<void>;
    handleCurrentHintsUpdate: (hints: vscode.Diagnostic[]) => Promise<void>;
    handleCurrentFixesUpdate: (fixes: vscode.CodeAction[]) => Promise<void>;
    handleCurrentCommandsUpdate: (commands: vscode.Command[]) => Promise<void>;
    handleCurrentCodeLensUpdate: (codeLens: vscode.CodeLens[]) => Promise<void>;
    handleCurrentCompletionsUpdate: (completions: vscode.CompletionItem[]) => Promise<void>;
    handleCurrentSignaturesUpdate: (signatures: vscode.SignatureHelp) => Promise<void>;
    handleCurrentHoverUpdate: (hover: vscode.Hover) => Promise<void>;
    handleCurrentDefinitionsUpdate: (definitions: vscode.Definition) => Promise<void>;
    handleCurrentReferencesUpdate: (references: vscode.Location[]) => Promise<void>;
    handleCurrentSymbolsUpdate: (symbols: vscode.SymbolInformation[]) => Promise<void>;
    handleCurrentWorkspaceSymbolsUpdate: (symbols: vscode.SymbolInformation[]) => Promise<void>;
    handleCurrentDocumentSymbolsUpdate: (symbols: vscode.DocumentSymbol[]) => Promise<void>;
    handleCurrentFormattingOptionsUpdate: (options: vscode.FormattingOptions) => Promise<void>;
}